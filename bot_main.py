import telebot
from telebot import types
import logging
from config import Config
from typing import Dict, List, Optional
from datetime import datetime

# Configure logging
logging.basicConfig(
    level=Config.LOG_LEVEL,
    format=Config.LOG_FORMAT,
    filename=Config.LOG_FILE
)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(Config.BOT_TOKEN)

# Button templates for different sections
BUTTON_TEMPLATES = {
    'main_menu': [
        ('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏', 'company_info'),
        ('–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞–º', 'internship'),
        ('–ü–ª–∞–Ω –∞–¥–∞–ø—Ç–∞—Ü–∏–∏', 'adaptation'),
        ('–ù–∞–ø–∏—Å–∞—Ç—å HR', 'hr')
    ],
    'company_info': [
        ('–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é', 'read_article'),
        ('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ', 'watch_video'),
        ('–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç', 'take_test'),
        ('–ù–∞–∑–∞–¥', 'back_to_main')
    ],
    'internship': [
        ('–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏', 'internship_program'),
        ('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'internship_schedule'),
        ('–ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏', 'mentors'),
        ('–î–æ–∫—É–º–µ–Ω—Ç—ã', 'internship_docs'),
        ('–ù–∞–∑–∞–¥', 'back_to_main')
    ],
    'adaptation': [
        ('–ú–æ–π –ø–ª–∞–Ω', 'my_plan'),
        ('–ü—Ä–æ–≥—Ä–µ—Å—Å', 'progress'),
        ('–ó–∞–¥–∞—á–∏', 'tasks'),
        ('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', 'feedback'),
        ('–ù–∞–∑–∞–¥', 'back_to_main')
    ],
    'hr': [
        ('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', 'ask_question'),
        ('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É', 'schedule_meeting'),
        ('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'submit_docs'),
        ('–ù–∞–∑–∞–¥', 'back_to_main')
    ],
    'test': [
        ('–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç', 'start_test'),
        ('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç', 'continue_test'),
        ('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã', 'test_results'),
        ('–ù–∞–∑–∞–¥', 'back_to_main')
    ]
}

def create_menu_markup(menu_type: str) -> types.InlineKeyboardMarkup:
    """Create menu markup based on button template"""
    markup = types.InlineKeyboardMarkup(row_width=1)
    buttons = BUTTON_TEMPLATES.get(menu_type, BUTTON_TEMPLATES['main_menu'])
    markup.add(*[types.InlineKeyboardButton(text=text, callback_data=data) 
                 for text, data in buttons])
    return markup

def get_welcome_message() -> str:
    """Get formatted welcome message"""
    return """üëã –î–æ–±—Ä –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏—é!
–Ø ‚Äî –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏. –ó–¥–µ—Å—å —Ç—ã
–Ω–∞–π–¥—ë—à—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ
–∫–æ–º–ø–∞–Ω–∏–∏, –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
–∏ —Å–≤–æ–π –ø–ª–∞–Ω

üîª –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! –í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ
—Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å:

–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã,
–≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –∫ HR. üöÄ"""

def get_section_message(section: str) -> str:
    """Get formatted message for specific section"""
    messages = {
        'company_info': """üìÖ –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π

üóí –¢–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç: —É–∑–Ω–∞—Ç—å –æ –Ω–∞—Å
‚úÖ –ò [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á —ç—Ç–∞–ø–∞]

üìå –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:
üìñ –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
üìπ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è
üîç –ü–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç

‚ö°Ô∏è –ù–µ –∑–∞—Ç—è–≥–∏–≤–∞–π! –°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
—Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
—Ç–µ–∫—É—â–µ–≥–æ. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã,
–ø–∏—à–∏ HR. üöÄ""",
        'internship': """üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ

–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é
–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏,
—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞—Ö.

–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:""",
        'adaptation': """üìã –ü–ª–∞–Ω –∞–¥–∞–ø—Ç–∞—Ü–∏–∏

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π
–ø—Ä–æ–≥—Ä–µ—Å—Å, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏
–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:""",
        'hr': """üë• HR –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã HR,
–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    }
    return messages.get(section, get_welcome_message())

@bot.message_handler(commands=['start'])
def start(message):
    """Handle /start command with logging"""
    try:
        logger.info(f"User {message.from_user.id} started the bot")
        markup = create_menu_markup('main_menu')
        bot.send_message(message.chat.id, get_welcome_message(), reply_markup=markup)
    except Exception as e:
        logger.error(f"Error in start handler: {str(e)}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    """Handle all callback queries with improved error handling and logging"""
    try:
        if call.data == 'back_to_main':
            logger.info(f"User {call.from_user.id} returned to main menu")
            markup = create_menu_markup('main_menu')
            bot.edit_message_text(
                get_welcome_message(),
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
        elif call.data in BUTTON_TEMPLATES:
            logger.info(f"User {call.from_user.id} accessed {call.data}")
            markup = create_menu_markup(call.data)
            bot.edit_message_text(
                get_section_message(call.data),
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
        # Add specific handlers for other actions here
        elif call.data == 'start_test':
            # TODO: Implement test start logic
            pass
        elif call.data == 'ask_question':
            # TODO: Implement question asking logic
            pass
        elif call.data == 'schedule_meeting':
            # TODO: Implement meeting scheduling logic
            pass
        elif call.data == 'submit_docs':
            # TODO: Implement document submission logic
            pass
        
    except Exception as e:
        logger.error(f"Error in callback handler: {str(e)}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

if __name__ == '__main__':
    logger.info("Bot started")
    bot.infinity_polling()