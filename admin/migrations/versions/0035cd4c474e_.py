"""empty message

Revision ID: 0035cd4c474e
Revises: 
Create Date: 2025-04-11 21:33:54.235240

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0035cd4c474e'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('position')
    op.drop_table('adaptation_plan')
    op.drop_table('adaptation_stage')
    op.add_column('adaptation_plans', sa.Column('id', sa.Integer(), nullable=False))
    op.add_column('adaptation_plans', sa.Column('position_id', sa.Integer(), nullable=False))
    op.alter_column('adaptation_plans', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_constraint('fk_adaptation_plans_ID_position_position', 'adaptation_plans', type_='foreignkey')
    op.create_foreign_key(op.f('fk_adaptation_plans_position_id_positions'), 'adaptation_plans', 'positions', ['position_id'], ['id'], ondelete='CASCADE')
    op.drop_column('adaptation_plans', 'ID_adaptplan')
    op.drop_column('adaptation_plans', 'ID_position')
    op.alter_column('adaptation_stages', 'ID_adaptplan',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('adaptation_stages', 'ID_material',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_constraint('fk_adaptation_stages_ID_adaptplan_adaptation_plans', 'adaptation_stages', type_='foreignkey')
    op.create_foreign_key(op.f('fk_adaptation_stages_ID_adaptplan_adaptation_plans'), 'adaptation_stages', 'adaptation_plans', ['ID_adaptplan'], ['id'])
    op.alter_column('content_material', 'type',
               existing_type=sa.VARCHAR(),
               type_=sa.Enum('article', 'video', 'image', name='typecontent'),
               nullable=False)
    op.alter_column('content_material', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.add_column('feedback', sa.Column('ID_feedback', sa.Integer(), nullable=False))
    op.add_column('feedback', sa.Column('ID_user', sa.Integer(), nullable=False))
    op.add_column('feedback', sa.Column('ID_material', sa.Integer(), nullable=False))
    op.drop_constraint('feedback_user_id_fkey', 'feedback', type_='foreignkey')
    op.drop_constraint('feedback_material_id_fkey', 'feedback', type_='foreignkey')
    op.create_foreign_key(op.f('fk_feedback_ID_user_user'), 'feedback', 'user', ['ID_user'], ['id'])
    op.create_foreign_key(op.f('fk_feedback_ID_material_content_material'), 'feedback', 'content_material', ['ID_material'], ['id'])
    op.drop_column('feedback', 'user_id')
    op.drop_column('feedback', 'id')
    op.drop_column('feedback', 'material_id')
    op.alter_column('notification', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('notification', 'message',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('notification', 'status',
               existing_type=sa.VARCHAR(),
               type_=sa.Enum('sent', 'pending', name='notificationstatus'),
               nullable=False)
    op.alter_column('notification', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('test', 'stage_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('test', 'test_type',
               existing_type=sa.VARCHAR(),
               type_=sa.Enum('open', 'closed', name='testtype'),
               nullable=False)
    op.alter_column('test', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_constraint('test_stage_id_fkey', 'test', type_='foreignkey')
    op.create_foreign_key(op.f('fk_test_stage_id_adaptation_stages'), 'test', 'adaptation_stages', ['stage_id'], ['ID_adaptstage'])
    op.alter_column('test_option', 'question_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('test_option', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('test_question', 'test_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('test_question', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('user', 'first_name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('user', 'last_name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('user', 'username',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('user', 'role',
               existing_type=sa.VARCHAR(),
               type_=sa.Enum('employee', 'hr', name='userrole'),
               nullable=False)
    op.alter_column('user', 'registration_date',
               existing_type=sa.DATE(),
               nullable=False)
    op.alter_column('user', 'department_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('user', 'position_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_constraint('user_position_id_fkey', 'user', type_='foreignkey')
    op.create_foreign_key(op.f('fk_user_position_id_positions'), 'user', 'positions', ['position_id'], ['id'])
    op.add_column('user_adaptation_progress', sa.Column('ID_useradaptprogress', sa.Integer(), nullable=False))
    op.add_column('user_adaptation_progress', sa.Column('ID_user', sa.Integer(), nullable=False))
    op.add_column('user_adaptation_progress', sa.Column('ID_adaptstage', sa.Integer(), nullable=False))
    op.alter_column('user_adaptation_progress', 'status',
               existing_type=sa.VARCHAR(),
               type_=sa.Enum('pending', 'completed', name='progressstatus'),
               nullable=False)
    op.drop_constraint('user_adaptation_progress_stage_id_fkey', 'user_adaptation_progress', type_='foreignkey')
    op.drop_constraint('user_adaptation_progress_user_id_fkey', 'user_adaptation_progress', type_='foreignkey')
    op.create_foreign_key(op.f('fk_user_adaptation_progress_ID_adaptstage_adaptation_stages'), 'user_adaptation_progress', 'adaptation_stages', ['ID_adaptstage'], ['ID_adaptstage'])
    op.create_foreign_key(op.f('fk_user_adaptation_progress_ID_user_user'), 'user_adaptation_progress', 'user', ['ID_user'], ['id'])
    op.drop_column('user_adaptation_progress', 'user_id')
    op.drop_column('user_adaptation_progress', 'id')
    op.drop_column('user_adaptation_progress', 'stage_id')
    op.alter_column('user_test_answer', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('user_test_answer', 'question_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('user_test_answer', 'question_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('user_test_answer', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.add_column('user_adaptation_progress', sa.Column('stage_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_adaptation_progress', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.add_column('user_adaptation_progress', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(op.f('fk_user_adaptation_progress_ID_user_user'), 'user_adaptation_progress', type_='foreignkey')
    op.drop_constraint(op.f('fk_user_adaptation_progress_ID_adaptstage_adaptation_stages'), 'user_adaptation_progress', type_='foreignkey')
    op.create_foreign_key('user_adaptation_progress_user_id_fkey', 'user_adaptation_progress', 'user', ['user_id'], ['id'])
    op.create_foreign_key('user_adaptation_progress_stage_id_fkey', 'user_adaptation_progress', 'adaptation_stage', ['stage_id'], ['id'])
    op.alter_column('user_adaptation_progress', 'status',
               existing_type=sa.Enum('pending', 'completed', name='progressstatus'),
               type_=sa.VARCHAR(),
               nullable=True)
    op.drop_column('user_adaptation_progress', 'ID_adaptstage')
    op.drop_column('user_adaptation_progress', 'ID_user')
    op.drop_column('user_adaptation_progress', 'ID_useradaptprogress')
    op.drop_constraint(op.f('fk_user_position_id_positions'), 'user', type_='foreignkey')
    op.create_foreign_key('user_position_id_fkey', 'user', 'position', ['position_id'], ['id'])
    op.alter_column('user', 'position_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('user', 'department_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('user', 'registration_date',
               existing_type=sa.DATE(),
               nullable=True)
    op.alter_column('user', 'role',
               existing_type=sa.Enum('employee', 'hr', name='userrole'),
               type_=sa.VARCHAR(),
               nullable=True)
    op.alter_column('user', 'username',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('user', 'last_name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('user', 'first_name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('test_question', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('test_question', 'test_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('test_option', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('test_option', 'question_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_constraint(op.f('fk_test_stage_id_adaptation_stages'), 'test', type_='foreignkey')
    op.create_foreign_key('test_stage_id_fkey', 'test', 'adaptation_stage', ['stage_id'], ['id'])
    op.alter_column('test', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('test', 'test_type',
               existing_type=sa.Enum('open', 'closed', name='testtype'),
               type_=sa.VARCHAR(),
               nullable=True)
    op.alter_column('test', 'stage_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('notification', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('notification', 'status',
               existing_type=sa.Enum('sent', 'pending', name='notificationstatus'),
               type_=sa.VARCHAR(),
               nullable=True)
    op.alter_column('notification', 'message',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('notification', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.add_column('feedback', sa.Column('material_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('feedback', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.add_column('feedback', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(op.f('fk_feedback_ID_material_content_material'), 'feedback', type_='foreignkey')
    op.drop_constraint(op.f('fk_feedback_ID_user_user'), 'feedback', type_='foreignkey')
    op.create_foreign_key('feedback_material_id_fkey', 'feedback', 'content_material', ['material_id'], ['id'])
    op.create_foreign_key('feedback_user_id_fkey', 'feedback', 'user', ['user_id'], ['id'])
    op.drop_column('feedback', 'ID_material')
    op.drop_column('feedback', 'ID_user')
    op.drop_column('feedback', 'ID_feedback')
    op.alter_column('content_material', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('content_material', 'type',
               existing_type=sa.Enum('article', 'video', 'image', name='typecontent'),
               type_=sa.VARCHAR(),
               nullable=True)
    op.drop_constraint(op.f('fk_adaptation_stages_ID_adaptplan_adaptation_plans'), 'adaptation_stages', type_='foreignkey')
    op.create_foreign_key('fk_adaptation_stages_ID_adaptplan_adaptation_plans', 'adaptation_stages', 'adaptation_plans', ['ID_adaptplan'], ['ID_adaptplan'])
    op.alter_column('adaptation_stages', 'ID_material',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('adaptation_stages', 'ID_adaptplan',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.add_column('adaptation_plans', sa.Column('ID_position', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('adaptation_plans', sa.Column('ID_adaptplan', sa.INTEGER(), autoincrement=True, nullable=False))
    op.drop_constraint(op.f('fk_adaptation_plans_position_id_positions'), 'adaptation_plans', type_='foreignkey')
    op.create_foreign_key('fk_adaptation_plans_ID_position_position', 'adaptation_plans', 'position', ['ID_position'], ['id'])
    op.alter_column('adaptation_plans', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_column('adaptation_plans', 'position_id')
    op.drop_column('adaptation_plans', 'id')
    op.create_table('adaptation_stage',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('plan_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('sequence_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('deadline', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('content_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['content_id'], ['content_material.id'], name='adaptation_stage_content_id_fkey'),
    sa.ForeignKeyConstraint(['plan_id'], ['adaptation_plan.id'], name='adaptation_stage_plan_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='adaptation_stage_pkey')
    )
    op.create_table('adaptation_plan',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('position_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_individual', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['position_id'], ['position.id'], name='adaptation_plan_position_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='adaptation_plan_pkey')
    )
    op.create_table('position',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='position_pkey'),
    sa.UniqueConstraint('title', name='uq_position_title')
    )
    # ### end Alembic commands ###
